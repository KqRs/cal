local library = require(game.ReplicatedStorage.Library.Client.Save)
local save = library.Get()
local function Antiafk()
    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Idle Tracking: Stop Timer"):FireServer()
    task.wait(.2)
    for i, v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
        v:Disable()
    end
    spawn(function()
        local VirtualInputManager = game:GetService("VirtualInputManager")
        while task.wait() do
            VirtualInputManager:SendKeyEvent(true, "Space", false, game)
            task.wait(.2)
            VirtualInputManager:SendKeyEvent(false, "Space", false, game)
            task.wait(300)
        end
    end)
end
Antiafk()


local Players2 = game:GetService("Players")
local localPlayer2 = Players2.LocalPlayer
local function removeOtherPlayerModels()
    for _, player in pairs(Players2:GetPlayers()) do
        if player ~= localPlayer2 and player.Character and player.Character.Parent == workspace then
            player.Character:Destroy()
        end
    end
end
Players2.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        wait(3)
        if player ~= localPlayer2 and player.Character and player.Character.Parent == workspace then
            character:Destroy()
        end
    end)
end)
removeOtherPlayerModels()
game:GetService("ReplicatedStorage").Library.Client.XPBallCmds.Ball.Center.Item.Texture = ""
local function rollEggs()
    while true do
        pcall(function()
            game.ReplicatedStorage.Network["Eggs_Roll"]:InvokeServer()
            task.wait(0.2)
        end)
    end
end
task.spawn(rollEggs)


getgenv().PeopleForMail = "fishQrs2"
getgenv().ItemToMail = {
    -- ["Item Name"] = {tn = required tier number (optional), amount = amount to send},
    ["Crystal Key Upper Half"] = {amount = 1000},
    ["Crystal Key Lower Half"] = {amount = 1000},
    ["Legendary Mining Chest"] = {amount = 10000},
    ["Celestial Mining Chest"] = {amount = 500},
    ["Runic Mining Chest"] = {amount = 500},
    ["Legendary Enchant Safe"] = {amount = 10},
    ["Celestial Enchant Safe"] = {amount = 1},
    ["Exclusive Enchant Safe"] = {amount = 1},
    ["Magma Egg"] = {amount = 1000},
    ["Abyssal Treasure Chest"] = {amount = 200},
    ["Corrupted Huge Bait"] = {tn = 1, amount = 1000},
    ["Instant Luck Potion"] = {tn = 4, amount = 150},
    ["God Potion"] = {tn = 1, amount = 1},
    ["Tech Gift"] = {amount = 250},
    ["Titanic Charge Token"] = {amount = 100},
    ["Huge Charge Token"] = {amount = 250},
    ["Charge Token"] = {amount = 1000}
}


local function genMessage()
    local first = "free gift"
    local sec = math.random(1, 100)
    return first .. " " .. tostring(sec)
end


local function PathExists(path)
    local success, _ = pcall(function()
        return path
    end)
    return success and path ~= nil
end

local function MailItems(category, inventory)
    if inventory ~= nil then
        for id, v in pairs(inventory) do
            local itemName = v.id
            local amount = v._am or 1
            local tierNumber = v.tn or nil

            local itemData = getgenv().ItemToMail[itemName]
            if itemData then
                local requiredAmount = itemData.amount
                local requiredTN = itemData.tn or nil

                if amount >= requiredAmount and (not requiredTN or tierNumber == requiredTN) then
                    game.ReplicatedStorage.Network["Mailbox: Send"]:InvokeServer(getgenv().PeopleForMail, genMessage(), category, id, amount)
                    task.wait(1)
                end
            end
        end
    end
end

local function MailHuge()
    if PathExists(save.Inventory.Pet) then
        if save.Inventory.Pet then
            for id, v in pairs(save.Inventory.Pet) do
                local itemName = v.id
                if string.find(itemName, "Huge") then
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Locking_SetLocked"):InvokeServer(id, false)
                    task.wait(1)
                    game.ReplicatedStorage.Network["Mailbox: Send"]:InvokeServer(getgenv().PeopleForMail, genMessage(), "Pet", id, 1)
                    task.wait(1)
                end
            end
        end
    end
end

local function MailMisc()
    if PathExists(save.Inventory.Misc) then
        MailItems("Misc", save.Inventory.Misc)
    end
end

local function MailEgg()
    if PathExists(save.Inventory.Egg) then
        MailItems("Egg", save.Inventory.Egg)
    end
end

local function MailLootbox()
    if PathExists(save.Inventory.Lootbox) then
        MailItems("Lootbox", save.Inventory.Lootbox)
    end
end
local function MailConsumable()
    if PathExists(save.Inventory.Consumable) then
        MailItems("Consumable", save.Inventory.Consumable)
    end
end

task.spawn(function()
    while true do
        task.wait(300)
        pcall(MailHuge)
        task.wait(1)
        pcall(MailMisc)
        task.wait(1)
        pcall(MailEgg)
        task.wait(1)
        pcall(MailLootbox)
        task.wait(1)
        pcall(MailConsumable)
        task.wait(300)
    end
end)


local network = game:GetService("ReplicatedStorage"):WaitForChild("Network")
local function ClaimMail()
    network:WaitForChild("Mailbox: Claim All"):InvokeServer()
end

task.spawn(function()
    task.wait(30)
    while not (save and save.UpgradesPurchased and save.UpgradesPurchased["Mailbox"]) do
        task.wait(60)
    end
    while true do
        ClaimMail()
        task.wait(10)
    end
end)


