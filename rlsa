task.wait(2)


getgenv().Craft = true

local currentRecipe = "N/A" -- Изначально устанавливаем как N/A


-- Функция для создания GUI
local function CreateGui()
    local player = game.Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    
    -- Проверяем, существует ли уже GUI
    local screenGui = playerGui:FindFirstChild("CraftingGui")
    if not screenGui then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "CraftingGui"
        screenGui.Parent = playerGui
    end

    -- Проверяем, существует ли уже TextLabels
    local infoLabel = screenGui:FindFirstChild("InfoLabel")
    if not infoLabel then
        infoLabel = Instance.new("TextLabel")
        infoLabel.Name = "InfoLabel"
        infoLabel.Size = UDim2.new(0, 300, 0, 200)
        infoLabel.Position = UDim2.new(0, 10, 0, 10)
        infoLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        infoLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        infoLabel.TextScaled = true
        infoLabel.Text = "Loading..."
        infoLabel.Parent = screenGui
    end

    local recipeLabel = screenGui:FindFirstChild("RecipeLabel")
    if not recipeLabel then
        recipeLabel = Instance.new("TextLabel")
        recipeLabel.Name = "RecipeLabel"
        recipeLabel.Size = UDim2.new(0, 300, 0, 50)
        recipeLabel.Position = UDim2.new(0, 10, 0, 220)
        recipeLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        recipeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        recipeLabel.TextScaled = true
        recipeLabel.Text = "Current Recipe: N/A"
        recipeLabel.Parent = screenGui
    end

    return infoLabel, recipeLabel
end

-- Функция для обновления GUI
-- Функция для обновления GUI
local function UpdateGui(Coins, Dice, Dice2, Dice3, MegaDice, newRecipe)
    local infoLabel, recipeLabel = CreateGui()
    infoLabel.Text = "Coins: " .. tostring(Coins) .. "\n" ..
                     "Dice: " .. tostring(Dice) .. "\n" ..
                     "Dice II: " .. tostring(Dice2) .. "\n" ..
                     "Dice III: " .. tostring(Dice3) .. "\n" ..
                     "Mega Dice: " .. tostring(MegaDice)
    
    -- Обновляем только если новый рецепт отличается от текущего
    if newRecipe and newRecipe ~= currentRecipe then
        currentRecipe = newRecipe
    end

    recipeLabel.Text = "Current Recipe: " .. currentRecipe
end



local function GetCurrencyAndCraft()
    local library = require(game.ReplicatedStorage.Library.Client.Save)
    local save = library.Get()

    local Coins, Dice, Dice2, Dice3, MegaDice = 0, 0, 0, 0, 0

    -- Получение количества монет и предметов
    for i, v in pairs(save.Inventory.Currency) do
        if v.id == "RngCoins" then
            Coins = v._am or 0
        end
    end

    for i, v in pairs(save.Inventory.Misc) do
        if v.id == "Lucky Dice" then
            Dice = v._am or 1
        elseif v.id == "Lucky Dice II" then
            Dice2 = v._am or 1
        elseif v.id == "Lucky Dice III" then
            Dice3 = v._am or 1
        elseif v.id == "Mega Lucky Dice" then
            MegaDice = v._am or 1
        end
    end
    UpdateGui(Coins, Dice, Dice2, Dice3, MegaDice)
    return Coins, Dice, Dice2, Dice3, MegaDice
end



-- Функция для крафта предмета
local function craftItem(itemName, amount, dicePerCraft, coinsPerCraft, Coins, Dice, Dice2, Dice3, MegaDice)
    local itemCraftFunction = game:GetService("ReplicatedStorage"):WaitForChild("Network"):FindFirstChild("LuckyDice_Craft")
    if not itemCraftFunction then
        return false
    end

    -- Проверка на нулевые значения перед вычислениями
    amount = amount or 0
    dicePerCraft = dicePerCraft or 0
    coinsPerCraft = coinsPerCraft or 0

    local possibleCraftsByDice = math.floor(amount / dicePerCraft)
    local possibleCraftsByCoins = math.floor(Coins / coinsPerCraft)
    local possibleCrafts = math.min(possibleCraftsByDice, possibleCraftsByCoins)

    if possibleCrafts > 0 then
        local totalDiceNeeded = possibleCrafts * dicePerCraft
        local totalCoinsNeeded = possibleCrafts * coinsPerCraft
        
        task.wait(0.5)

        local craftArgs = {
            [1] = itemName,
            [2] = possibleCrafts
        }

        local success, result = pcall(function()
            return itemCraftFunction:InvokeServer(unpack(craftArgs))
        end)

        if success then


            -- Обновление ресурсов после успешного крафта
            Coins = Coins - totalCoinsNeeded
            if itemName == "Lucky Dice II" then
                Dice = Dice - totalDiceNeeded
                Dice2 = Dice2 + possibleCrafts
            elseif itemName == "Lucky Dice III" then
                Dice2 = Dice2 - totalDiceNeeded
                Dice3 = Dice3 + possibleCrafts
            elseif itemName == "Mega Lucky Dice" then
                Dice3 = Dice3 - totalDiceNeeded
                MegaDice = MegaDice + possibleCrafts
            elseif itemName == "Mega Lucky Dice II" then
                MegaDice = MegaDice - totalDiceNeeded
            end

            return true, Coins, Dice, Dice2, Dice3, MegaDice
        else

            return false, Coins, Dice, Dice2, Dice3, MegaDice
        end
    else

        return false, Coins, Dice, Dice2, Dice3, MegaDice
    end
end

-- Функция SmartCraft1 для рецепта "num1"
local function SmartCraft1()
    local Coins, Dice, Dice2, Dice3, MegaDice = GetCurrencyAndCraft()

    -- Инициализация переменных, если они равны nil
    Coins = Coins or 0
    Dice = Dice or 0
    Dice2 = Dice2 or 0
    Dice3 = Dice3 or 0
    MegaDice = MegaDice or 0



    -- Крафт Lucky Dice II из Lucky Dice
    if Dice > 0 then
        local success
        success, Coins, Dice, Dice2, Dice3, MegaDice = craftItem("Lucky Dice II", Dice, 5, 100, Coins, Dice, Dice2, Dice3, MegaDice)
    end

    -- Крафт Mega Lucky Dice из Lucky Dice II
    if Dice2 > 0 then
        if MegaDice < 3 then
            local requiredDicePerCraft3 = 30
            local requiredCoinsPerCraft3 = 100000
            local maxMegaDice = 3 - MegaDice -- Оставшееся количество для достижения 3

            local possibleCraftsByDice = math.floor(Dice2 / requiredDicePerCraft3)
            local possibleCraftsByCoins = math.floor(Coins / requiredCoinsPerCraft3)
            local possibleCrafts = math.min(possibleCraftsByDice, possibleCraftsByCoins, maxMegaDice)

            if possibleCrafts > 0 then
                local totalDiceNeeded = possibleCrafts * requiredDicePerCraft3
                local totalCoinsNeeded = possibleCrafts * requiredCoinsPerCraft3

                task.wait(0.5)

                local craftArgs = {
                    [1] = "Mega Lucky Dice",
                    [2] = possibleCrafts
                }

                local success, result = pcall(function()
                    local megaCraftFunction = game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("LuckyDice_Craft")
                    return megaCraftFunction:InvokeServer(unpack(craftArgs))
                end)

                if success then

                    -- Обновление ресурсов после успешного крафта
                    Coins = Coins - totalCoinsNeeded
                    Dice2 = Dice2 - totalDiceNeeded
                    MegaDice = MegaDice + possibleCrafts
                else
                    wait()
                end
            else
                wait()
            end
        else
            wait()
        end
    end

    -- Крафт Mega Lucky Dice II из Mega Lucky Dice
    if MegaDice >= 3 then
        local requiredMegaDicePerCraftII = 3
        local requiredCoinsPerCraftII = 300000
        local possibleCraftsByMegaDice = math.floor(MegaDice / requiredMegaDicePerCraftII)
        local possibleCraftsByCoins = math.floor(Coins / requiredCoinsPerCraftII)
        local possibleCraftsII = math.min(possibleCraftsByMegaDice, possibleCraftsByCoins)

        if possibleCraftsII > 0 then
            local totalMegaDiceNeeded = possibleCraftsII * requiredMegaDicePerCraftII
            local totalCoinsNeeded = possibleCraftsII * requiredCoinsPerCraftII
            

            task.wait(0.5)

            local craftArgs = {
                [1] = "Mega Lucky Dice II",
                [2] = possibleCraftsII
            }

            local success, result = pcall(function()
                local megaCraftFunction = game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("LuckyDice_Craft")
                return megaCraftFunction:InvokeServer(unpack(craftArgs))
            end)

            if success then

                -- Обновление ресурсов после успешного крафта
                Coins = Coins - totalCoinsNeeded
                MegaDice = MegaDice - totalMegaDiceNeeded
            else

            end
        else

        end
    end
end

-- Функция SmartCraft2 для рецепта "num2"
local function SmartCraft2()
    local Coins, Dice, Dice2, Dice3, MegaDice = GetCurrencyAndCraft()

    -- Инициализация переменных, если они равны nil
    Coins = Coins or 0
    Dice = Dice or 0
    Dice2 = Dice2 or 0
    Dice3 = Dice3 or 0
    MegaDice = MegaDice or 0



    -- Крафт Lucky Dice II из Lucky Dice
    if Dice > 0 then
        local success
        success, Coins, Dice, Dice2, Dice3, MegaDice = craftItem("Lucky Dice II", Dice, 5, 100, Coins, Dice, Dice2, Dice3, MegaDice)
    end

    -- Крафт Lucky Dice III из Lucky Dice II
    if Dice2 > 0 then
        local success
        success, Coins, Dice, Dice2, Dice3, MegaDice = craftItem("Lucky Dice III", Dice2, 15, 400, Coins, Dice, Dice2, Dice3, MegaDice)
    end

    -- Крафт Mega Lucky Dice из Lucky Dice III
    if Dice3 > 0 then
        if MegaDice < 3 then
            local requiredDicePerCraft3 = 2
            local requiredCoinsPerCraft3 = 100000
            local maxMegaDice = 3 - MegaDice -- Оставшееся количество для достижения 3

            local possibleCraftsByDice = math.floor(Dice3 / requiredDicePerCraft3)
            local possibleCraftsByCoins = math.floor(Coins / requiredCoinsPerCraft3)
            local possibleCrafts = math.min(possibleCraftsByDice, possibleCraftsByCoins, maxMegaDice)

            if possibleCrafts > 0 then
                local totalDiceNeeded = possibleCrafts * requiredDicePerCraft3
                local totalCoinsNeeded = possibleCrafts * requiredCoinsPerCraft3


                task.wait(0.5)

                local craftArgs = {
                    [1] = "Mega Lucky Dice",
                    [2] = possibleCrafts
                }

                local success, result = pcall(function()
                    local megaCraftFunction = game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("LuckyDice_Craft")
                    return megaCraftFunction:InvokeServer(unpack(craftArgs))
                end)

                if success then

                    -- Обновление ресурсов после успешного крафта
                    Coins = Coins - totalCoinsNeeded
                    Dice3 = Dice3 - totalDiceNeeded
                    MegaDice = MegaDice + possibleCrafts
                else
                    wait()
                end
            else
                wait()
            end
        else
            wait()
        end
    end

    -- Крафт Mega Lucky Dice II из Mega Lucky Dice
    if MegaDice >= 3 then
        local requiredMegaDicePerCraftII = 3
        local requiredCoinsPerCraftII = 300000
        local possibleCraftsByMegaDice = math.floor(MegaDice / requiredMegaDicePerCraftII)
        local possibleCraftsByCoins = math.floor(Coins / requiredCoinsPerCraftII)
        local possibleCraftsII = math.min(possibleCraftsByMegaDice, possibleCraftsByCoins)

        if possibleCraftsII > 0 then
            local totalMegaDiceNeeded = possibleCraftsII * requiredMegaDicePerCraftII
            local totalCoinsNeeded = possibleCraftsII * requiredCoinsPerCraftII
            

            task.wait(0.5)

            local craftArgs = {
                [1] = "Mega Lucky Dice II",
                [2] = possibleCraftsII
            }

            local success, result = pcall(function()
                local megaCraftFunction = game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("LuckyDice_Craft")
                return megaCraftFunction:InvokeServer(unpack(craftArgs))
            end)

            if success then

                -- Обновление ресурсов после успешного крафта
                Coins = Coins - totalCoinsNeeded
                MegaDice = MegaDice - totalMegaDiceNeeded
            else
                wait()
            end
        else
            wait()
        end
    end
end








local function make(recipe)
    if recipe == "num1" then
        print("Processing recipe num1")
        while getgenv().Craft do
            task.wait(5)
            SmartCraft1()
            -- Обновляем GUI после крафта
            local Coins, Dice, Dice2, Dice3, MegaDice = GetCurrencyAndCraft()
            UpdateGui(Coins, Dice, Dice2, Dice3, MegaDice, currentRecipe) -- Рецепт остаётся прежним
        end
    elseif recipe == "num2" then
        print("Processing recipe num2")
        while getgenv().Craft do
            task.wait(5)
            SmartCraft2()
            -- Обновляем GUI после крафта
            local Coins, Dice, Dice2, Dice3, MegaDice = GetCurrencyAndCraft()
            UpdateGui(Coins, Dice, Dice2, Dice3, MegaDice, currentRecipe) -- Рецепт остаётся прежним
        end
    else
        print("Unknown recipe: " .. recipe)
    end
end




-- Функция GetRecipe для определения текущего рецепта
local function GetRecipe()
    local library = require(game:GetService("ReplicatedStorage").Library.Types.LuckyDice)
    local save = library

    for i, v in pairs(save.Recipes["Mega Lucky Dice"]) do
        print("Item index:", i)
        
        if typeof(v) == "table" then
            local data = v["_data"]
            
            if data then
                local id = data["id"]
                if id then
                    if id == "Lucky Dice II" then
                        print("Current Recipe: " .. "30x Lucky Dice II")
                        UpdateGui(nil, nil, nil, nil, nil, "30x Lucky Dice II") -- Обновляем GUI с текущим рецептом
                        make("num1")
                    elseif id == "Lucky Dice III" then
                        print("Current Recipe: " .. "2x Lucky Dice III")
                        UpdateGui(nil, nil, nil, nil, nil, "2x Lucky Dice III") -- Обновляем GUI с текущим рецептом
                        make("num2")
                    end
                else
                    print("Field 'id' not found in data:", data)
                end
            else
                print("Field '_data' not found in item:", v)
            end
        else
            print("Item is not a table:", v)
        end
    end
end
GetRecipe()
