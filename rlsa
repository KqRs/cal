local function getpet()
    -- Кэшируем список питомцев
    local curpet = {}
    for i, v in pairs(save) do
        table.insert(curpet, i)
    end
    return curpet
end

-- Обновление списка питомцев
local updatedPets = getpet()
spawn(function()
    while true do
        updatedPets = getpet()
        task.wait(60)
    end
end)


local function getSortedBreakables()
    local breakables = workspace.__THINGS.Breakables:GetChildren()
    local sortedBreakables = {}

    -- Разделяем объекты на сундуки и остальные
    local chests = {}
    local others = {}
    for _, obj in ipairs(breakables) do
        if obj:IsA("Model") then
            local id = obj:GetAttribute("BreakableID")
            local uid = obj.Name

            if id and string.find(string.lower(id), "chest") then
                table.insert(chests, {id = id, uid = uid})
            else
                table.insert(others, {id = id, uid = uid})
            end
        end
    end

    -- Объединяем сундуки и остальные объекты
    for _, chest in ipairs(chests) do
        table.insert(sortedBreakables, chest)
    end
    for _, other in ipairs(others) do
        table.insert(sortedBreakables, other)
    end

    return sortedBreakables
end

local function farm()
    -- Получаем отсортированные объекты
    local breakables = getSortedBreakables()

    for _, current in ipairs(breakables) do
        if current and current.uid then
            -- Проверяем, новый ли это объект
            if last ~= current.uid then
                local uid = current.uid
                local args = {}
                local pets = updatedPets -- Список питомцев, обновляется отдельно

                if pets and #pets > 0 then
                    for _, petName in ipairs(pets) do
                        args[petName] = tonumber(uid)
                    end

                    -- Отправляем данные на сервер
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Breakables_JoinPetBulk"):FireServer(args)
                    --print("Отправлено на объект:", uid, current.id)
                    last = uid
                end

                -- Ждем, пока объект исчезнет
                while true do
                    task.wait(.5)
                    local breakableExists = workspace.__THINGS.Breakables:FindFirstChild(uid)

                    if not breakableExists then
                        --print("Объект исчез:", uid)
                        break
                    end
                end
            end
        end
    end

    -- Ждем перед следующим циклом
    task.wait(.2)
end

spawn(function()
    while true do
        farm()
        task.wait(1)
    end
end)
